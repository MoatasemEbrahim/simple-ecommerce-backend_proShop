tags:
- name: "Users"
  description: "Everything about Users"

/users/:

  get:
    summary: "get all users"
    operationId: "getUsers"
    consumes:
    - "application/json"
    tags:
    - "Users"
    security:
    - bearerAuth: []
    responses:
      200:
        description: "Users data"
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                $ref: '#/components/schemas/User'
      401:
        description: "User not authorized"

  post:
    summary: "create new user"
    operationId: "createUser"
    consumes:
    - "application/json"
    tags:
    - "Users"
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: Moatasem Ebrahim
                required: true
              password:
                type: string
                example: Pass123
                required: true
              email:
                type: string
                example: user@email.com
                required: true
    responses:
      201:
        description: "User data"
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/User'
                - type: object
                  properties:
                    token:
                      type: string
                      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.LB9KGwpEWJ46lDGFp-0pTXJxJwxsqMdtYwcuwTc0qss
      400:
        description: "User already exists"
  
/users/{id}:
  get:
    summary: "get one user by id"
    operationId: "getUser"
    consumes:
    - "application/json"
    tags:
    - "Users"
    security:
    - bearerAuth: []
    responses:
      200:
        description: "User data"
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/User'
      401:
        description: "User not authorized"
      404:
        description: "User not found"

/users/profile:
  get:
    summary: "get user profile data by token"
    operationId: "getUserByToken"
    consumes:
    - "application/json"
    tags:
    - "Users"
    security:
    - bearerAuth: []
    responses:
      200:
        description: "User data"
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/User'
      401:
        description: "User not authorized"
      404:
        description: "User not found"

  patch:
    summary: "update user profile"
    operationId: "updateUserProfile"
    consumes:
    - "application/json"
    tags:
    - "Users"
    security:
    - bearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: Moatasem Ebrahim
              password:
                type: string
                example: Pass123
              email:
                type: string
                example: user@email.com
    responses:
      200:
        description: "User data"
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/User'
                - type: object
                  properties:
                    token:
                      type: string
                      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.LB9KGwpEWJ46lDGFp-0pTXJxJwxsqMdtYwcuwTc0qss
      401:
        description: "User not authorized"
      404:
        description: "User not found"



/users/authenticate:
  post:
   summary: "login user"
   operationId: "loginUser"
   consumes:
   - "application/json"
   tags:
   - "Users"
   requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                description: The user's email.
                example: user@email.com
              password:
                type: string
                description: The user's password.
                example: Pass123
   responses:
    200:
      description: "User data"
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/User'
              - type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.LB9KGwpEWJ46lDGFp-0pTXJxJwxsqMdtYwcuwTc0qss
    401:
      description: "Invalid email or password"
    404:
      description: "user not found"


/users/unauthenticate:
  get:
    summary: "logout user by token"
    operationId: "logoutUserByToken"
    consumes:
    - "application/json"
    tags:
    - "Users"
    security:
    - bearerAuth: []
    responses:
      200:
        description: "User logout"
        content:
          application/json:
            schema:
              type: object
              properties:
                loggedOut:
                  type: boolean
                  example: true
      401:
        description: "User not authorized"
      404:
        description: "User not found"
